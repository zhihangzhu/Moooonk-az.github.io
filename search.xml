<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>lc009</title>
      <link href="/2020/09/17/lc009/"/>
      <url>/2020/09/17/lc009/</url>
      
        <content type="html"><![CDATA[<h4 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">9. 回文数</a></h4><h6 id="从简单开始记录收获吧"><a href="#从简单开始记录收获吧" class="headerlink" title="从简单开始记录收获吧"></a>从简单开始记录收获吧</h6><p>回文的题有很多种，这种是很简单的；以前上课也有做过应该；</p><p><strong>直接回算，是很简单明了的一种思路：既然可回文，那么反向计算并判断最终结果是否与原来相等即可；</strong></p><p>另外此题负数并不是障碍，反而是可以直接返回false；</p><p>用例有超出int范围的数字，使用long；</p><h5 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h5><p>每道题都有学习的点，对上述进行改进：</p><p>这题最茫然的思路当然是，<strong>将数字对折</strong>。</p><p>对折的时间点就在与 上述回算的判断条件中  （x !=0)  改为 （x  &gt; sum)，这种对折的方法可以用到其他题中的。</p><p>于是后续也不需要计算了。</p><p>下面是官方盗来的图：鸣谢水印；<img src="https://pic.leetcode-cn.com/6777f38a8c8c443fde069cd4ffcbe39fc2828ff39ca3440fb01f15034e0271b8-file_1558924390353" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> CodeSet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>diary20200911</title>
      <link href="/2020/09/11/diary20200911/"/>
      <url>/2020/09/11/diary20200911/</url>
      
        <content type="html"><![CDATA[<p>今天一直在分memoryaccess以及memorydependence，今天走入了一个误区：在LLVM的官方文档中，我发现了memoryaccess中的walker里有描述clobber的地方，但是经过请教同事，我发现这个clobber只是单纯的使用这个单词而已，而我一直在这份文档中试图找寻clobber的定义以及例子，真是丢大了。</p><p>clobber的作用更类似于temp register。</p><p>由于优先级安排，这件事情要先放一放了，我会在后续把这次的收获，memorydependenceAnalysis的观后感分析写一波，或许在周末。</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>memorydependenceanalysis</title>
      <link href="/2020/09/09/memorydependenceanalysis/"/>
      <url>/2020/09/09/memorydependenceanalysis/</url>
      
        <content type="html"><![CDATA[<p>排版练习中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b = a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>简单描述，上述三行代码，a,b,c之间是有依赖关系的，b需要a的值，c需要b的值更新，这就是依赖，由于指令需要提高并发度，所以其实是必须等  a st(store)到一个register中，然后b才能调用这个register，后续一样，c必须等b st；这是最简单的例子。最近在分析一个bug中，不是以IR级别而是BB（basic blocks)级别；到目前为止，需要调整它的alignment还是删除掉这条ld（load），我尚无结论。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%1 &#x3D; vload &lt;4 * i16&gt;  %2 align 4</span><br></pre></td></tr></table></figure><p>从check而言这是不合理的，但是如果改成align 8，是正确的吗，为什么在第一次instr combine的过程不将align调整为8 而是 4。</p>]]></content>
      
      
      <categories>
          
          <category> LLVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> llvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
